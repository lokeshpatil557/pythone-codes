# -*- coding: utf-8 -*-
"""Data_analytic_assignment_7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10t16cEnzcIUEQQFxljMP8lO5Kx2AgxIx
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.api as sm
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.ar_model import AR
from statsmodels.tsa.arima_model import ARMA, ARIMA
from statsmodels.tsa.statespace.sarimax import SARIMAX
from math import sqrt
import seaborn as sns
from random import random
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error, median_absolute_error, mean_squared_log_error

df=pd.read_excel("/content/passenger (1).xlsx")
df.head()

df.columns = ['year','passengers']
df.head()

print('Time period start: {}\nTime period end: {}'.format(df.year.min(),df.year.max()))

df.shape

df['year'] = pd.to_datetime(df['year'], format='%Y-%m')

y= df.set_index('year')

y.index

y.isnull().sum()

"""**1.Comment on the nature of the data using suitable
visualization techniques**
"""

plt.plot(y)
plt.title("graph")
plt.show()

from statsmodels.tsa.stattools import adfuller
print ('Results of Dickey-Fuller Test:')
dftest = adfuller(y.passengers)
dfoutput = pd.Series(dftest[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
for key,value in dftest[4].items():
    dfoutput['Critical Value (%s)'%key] = value
print (dfoutput)

"""**INFERANCE:** For the given dataset we see null hypothesis is true. So, it is not stationary. Now, making it to stationary.

**2. Check the stationary using ADF test and autocorrelation
plot.**
"""

from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.graphics.tsaplots import plot_pacf
plt.figure()  
plt.subplot(211)
plot_acf(y.passengers, ax=plt.gca(), lags = 30) # y data (non stationary)
plt.subplot(212)
plot_pacf(y.passengers, ax=plt.gca(), lags = 30)
plt.show()

""" **3. Forecast the target variable prediction using a suitable
type of model.**
"""

train=y[:int(0.75*(len(y)))]
valid=y[int(0.75*(len(y))):]
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
from math import sqrt
model=ARIMA(train, order=(1, 1, 1))
model_fit=model.fit(disp=1)

start_index = valid.index.min()
end_index = valid.index.max()

#Predictions
predictions = model_fit.predict(start=start_index, end=end_index)

"""**4. Evaluate the different types of error residues to
check fitness of good of the  model.**
"""

from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error,median_absolute_error,mean_squared_log_error
def evaluate_forecast(y,pred):
    results = pd.DataFrame({'r2_score':r2_score(y, pred)}, index=[0])
    results['mean_absolute_error'] = mean_absolute_error(y, pred)
    results['median_absolute_error'] = median_absolute_error(y, pred)
    results['mse'] = mean_squared_error(y, pred)
    results['msle'] = mean_squared_log_error(y, pred)
    results['rmse'] = np.sqrt(results['mse'])
    return results

evaluate_forecast(y[start_index:end_index], predictions)#actual          (y)    vs prediction(test)

"""**5. Forecast the predictions for next 5 years on  target variable.**"""

model_fit.plot_predict(1,264) 
#for next 5 years
x=model_fit.forecast(steps=60)